#+TITLE: snvecR
#+AUTHOR: Ilja J. Kocken
#+EMAIL: ikocken@hawaii.edu
written by Ilja J. Kocken [[https://orcid.org/0000-0003-2196-8718][orcid:0000-0003-2196-8718]]

#+PROPERTY: header-args:R  :session *R:snvec-R* :exports both :results output :eval no-export

This file is here for personal use to keep track of progress, for interactive sessions, and for posterity.

* load libraries
:PROPERTIES:
:CREATED:  [2023-03-30 Thu 09:14]
:END:
#+begin_src R :results none
  library(tidyverse)
  # we use dplyr and ggplot2 mostly
  library(deSolve)
  # we use glue for info messages -> cli
  # as well as lubridate
  devtools::load_all()

  dat <- ZB18a
#+end_src

* DONE analyze the orbital solution input
CLOSED: [2023-04-10 Mon 15:37]
:PROPERTIES:
:CREATED:  [2023-03-29 Wed 14:20]
:END:
*** ee
#+begin_src R :results output graphics file :file imgs/input_ee.png :width 700 :eval never
  dat |>
   ggplot(aes(x = age / 1e3, y = ee)) +
   labs(x = "Age (Ma)", y = "Eccentricity") +
   scale_x_reverse() +
   geom_line()
#+end_src

#+RESULTS:
[[file:imgs/input_ee.png]]

*** inc
#+begin_src R :results output graphics file :file imgs/input_inc.png :width 700 :eval never
  dat |>
   ggplot(aes(x = age / 1e3, y = inc)) +
   labs(x = "Age (Ma)", y = "Inclination") +
   scale_x_reverse() +
   geom_line()
#+end_src

#+RESULTS:
[[file:imgs/input_inc.png]]

*** lph
#+begin_src R :results output graphics file :file imgs/input_lph.png :width 700
  dat |>
   ggplot(aes(x = age / 1e3, y = lph)) +
   labs(x = "Age (Ma)", y = "Long Periapse") +
   scale_x_reverse() +
   xlim(c(1, 0)) +
   geom_line() +
   geom_line(aes(y = unwrap(lph)), col = "red") +
   coord_cartesian(ylim=c(-3.1e6,200))
#+end_src

#+RESULTS:
[[file:imgs/input_lph.png]]

*** lan
#+begin_src R :results output graphics file :file imgs/input_lan.png :width 700
  dat |>
   ggplot(aes(x = age / 1e3, y = lan)) +
   labs(x = "Age (Ma)", y = "Long Ascending Node") +
   scale_x_reverse() +
   xlim(c(1, 0)) +
   geom_line() +
   geom_line(aes(y = unwrap(lan)), col = "red") +
   coord_cartesian(ylim=c(-2e4, 5))
#+end_src

#+RESULTS:
[[file:imgs/input_lan.png]]

*** h, k, p, q
#+begin_src R :results output graphics file :file imgs/input_hkpq.png :width 700 :eval never
  dat |>
    select(age, hh, kk, pp, qq, cc, dd) |>
    pivot_longer(hh:dd) |>
    ggplot(aes(x = age / 1e3, y = value)) +
    labs(x = "Age (Ma)") +
    scale_x_reverse() +
    xlim(c(1, 0)) +
    facet_grid(rows = vars(name), scales = "free_y") +
    geom_line()
#+end_src

#+RESULTS:
[[file:imgs/input_hkpq.png]]

* DONE understand the C-code
CLOSED: [2023-04-06 Thu 14:54]
:PROPERTIES:
:CREATED:  [2023-03-23 Thu 11:46]
:END:
I have the C-code from the [[https://doi.org/10.3847/1538-3881/ac80f8
][Zeebe 2022 paper]] located in a subdirectory here. I ignore it for the R package (see [[file:.gitignore]] and [[file:.Rbuildignore]]).

[[file:imgs/snvec-3.7.5/snvec-3.7.5.c]]

*** define global variables
once we turn this into a package, best to define them using a function
#+begin_src R
  ## def_globals <- function()
#+end_src

for now do it the simple way

#+RESULTS:

*** quick interpolation
:LOGBOOK:
- State "SOME"       from              [2023-03-24 Fri 14:38]
:END:
[[file:snvec-3.7.5/snvec-3.7.5.c::=== qinterp()][qinterp()]]
not sure if needed, could just use R's interp?
#+begin_src R
  qinterp <- function(y, ds, dx, m) {
    yi <- y[m]
    dy <- 0.
    dsa <- abs(ds)
    dxa <- abs(x)
    mm <- 1L

    if (dxa > DBL_EPSILON) {
      mm <- m -
    }
  }
#+end_src

linear interpolation using approx
#+begin_src R
  x = c(41, 45, seq(48, 50, length.out = 8))
  y = rnorm(length(x), 0, 1)
  z = approx(x = x, y = y, xout = 41:50)$y

  plot(x, y, type = "o")
  points(41:50, z, col = "red", pch = 3)
#+end_src

#+RESULTS:
: [1m[33mError[39m in `tibble()`:[22m
: [1m[22m[33m![39m Tibble columns must have compatible sizes.
: [36m•[39m Size 10: Existing data.
: [36m•[39m Size 50: Column `z`.
: [36mℹ[39m Only values of size one are recycled.
: [90mRun `rlang::last_trace()` to see where the error occurred.[39m

#+begin_src R
    qinterp <- function(x) {
    approx(x = x, y = y, xout = )
  }
#+end_src
*** unwrap
:LOGBOOK:
- State "SOME"       from              [2023-03-24 Fri 14:38]
:END:
[[file:snvec-3.7.5/snvec-3.7.5.c::=== unwrap()][unwrap()]]
*** euler
:LOGBOOK:
- State "SOME"       from              [2023-03-24 Fri 14:39]
:END:
[[file:snvec-3.7.5/snvec-3.7.5.c::=== euler()][euler()]]

*** fvei
[[file:snvec-3.7.5/snvec-3.7.5.c::=== fvei()][fvei()]]
calculates global h,k,p,q etc. from ecc,inc etc.

#+begin_src R
  #' fvei
  #'
  #' calculates global h,k,p,q etc. from ecc,inc etc.
  fvei <- function(ee, inc, lph, lan, ls) {
    hh <- ee * sin(lph / R2D)
    kk <- ee * cos(lph / R2D)
    pp <- 2. * sin(0.5 * inc / R2D) * sin(lan / R2D)
    qq <- 2. * sin(0.5 * inc / R2D) * cos(lan / R2D)
    cc <- cos(inc / R2D)
    dd <- cos(inc / R2D/2.)
    ## /* nn <- nvec(t): normal to orbit */
    nn[1] <-  sin(inc / R2D) * sin(lan / R2D)
    nn[2] <- -sin(inc / R2D) * cos(lan / R2D)
    nn[3] <-  cos(inc / R2D)
  }
#+end_src

for now put these values in a simple script below
*** finargs
[[file:snvec-3.7.5/snvec-3.7.5.c::=== finargs()][finargs()]]
 parse input arguments. arg list:
 [1] tend
 [2] Ed
 [3] Td
 [4] dir  OrbitSoln
 [5] file OrbitSoln

*** fedtd
[[file:snvec-3.7.5/snvec-3.7.5.c::=== fedtd() ][fedtd()]]
calculates global vars ndn,wdw,k0d from Td,Ed

#+begin_src R
  # as a function of ed, td
  k0d <- ((3./2.)*GM*ED0*ed/(OM*AU3))*D2S # 1/s => 1/d
  k0b0 <- k0d*(1.+BET0)
  ndn <- -4.6e-18*D2S*td # 1/s => 1/d
  wdw <- 51.*ndn*NW0 # Lambeck80, see PTman
  tdg <- td # global Td
#+end_src

#+RESULTS:
: Error: object 'ed' not found
: Error: object 'k0d' not found
: Error: object 'td' not found
: Error: object 'ndn' not found
: Error: object 'td' not found

*** finits
[[file:snvec-3.7.5/snvec-3.7.5.c::=== finits() ][finits()]]
init spin vector, transform to HCI
s,n in HCI. s',n' in ECLIPJ2000

calculates np
s0p
via euler transform

*** derivs
[[file:snvec-3.7.5/snvec-3.7.5.c::=== derivs()][derivs()]]

derivatives. RHS of DEQs for spin vector s = y

uses quinterp
#+begin_src R
  derivs <- function(t, y, yp) {
    kb <- ...
    ...
  }
#+end_src

yp[1]
yp[2]
yp[3] are the differential equations

qq pp = g-modes and s-modes, direct
cp derivs of h and k,
h and k from g-modes, calculate from ecc and long perihelion

these are prepped in fvei
*** driver
this is the one we want to study that does all the steps!

[[file:snvec-3.7.5/snvec-3.7.5.c::=== driver()][driver()]]
driver routine solving DEQs for spin vector s = y.

this calls =odeint=

odeint(y0,NEQ,t0,tfin,EPSLVR,h1,hmin,&nok,&nbad,derivs,stiff);

where y0 = a vector of size 3 (simple matrix)
NEQ = 3
t0 = 0.0
tfin = tfink * KY2D # days negative
  tfink =  tend = TEND = -1e3 (see finargs)
EPSLVR = 1e-7 global solver control
h1 = 0.1*dxsav
  dxsav = (tfin - t0)/kmax
  kmax = floor(1000.*2.656*sckx)
  sckx = fabs(tfink/1e3)
hmin = 0.0
&nok = ??
&nbad = ??
derivs = function(t, *y, *yp)
stiff = ??

*** odeint
[[file:imgs/snvec-3.7.5/fun/solver.c]]
Runge-Kutta driver. calls derivs and SOLVER.
Runge-Kutta driver with adaptive stepsize control. Integrate starting
values ystart[1..nvar] from x1 to x2 with accuracy eps, storing
intermediate results in global variables. h1 should be set as a
guessed first stepsize, hmin as the minimum allowed stepsize (can be
zero). On output nok and nbad are the number of good and bad (but retried
and fixed) steps taken, and ystart is replaced by values at the end of
the integration interval. derivs is the user-supplied routine for
calculating the right-hand side derivative, while SOLVER is the name
of the stepper routine to be used.

*** write outputs
*** [#A] inspect the C output
**** read in the raw spin vector s
the raw spin vector s, added as something that we write to file myself (not sure if correct!)
#+begin_src R
  snv_sout <- read_fwf("snvec-3.7.5/s-out.dat",
                     col_positions = fwf_empty("snvec-3.7.5/s-out.dat",
                                               col_names = c("time", "sx", "sy", "sz", "x")))
#+end_src

#+RESULTS:
: [1mindexing[0m [34ms-out.dat[0m [---------------------------------------------------------------------------------------------------------------------------] [32m0B/s[0m, eta: [36m?s[0m[1mindexing[0m [34ms-out.dat[0m [====================================================================================================================] [32m615.86MB/s[0m, eta: [36m 0s[0m                                                                                                                                                                                                 [1mRows: [22m[34m2523[39m [1mColumns: [22m[34m4[39m
: [36m──[39m [1mColumn specification[22m [36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[39m
:
: [32mdbl[39m (4): time, sx, sy, sz
:
: [36mℹ[39m Use `spec()` to retrieve the full column specification for this data.
: [36mℹ[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.

note that I switched from read_table to read_fwf because it can strip whitespace also at the end of the final column

**** plot the raw spin vector s
#+begin_src R :results output graphics file :file imgs/c-output_s.png :width 700
  pl_refs <- snv_sout |>
    pivot_longer(cols = sx:sz) |>
    ggplot(aes(time, value, col = name)) +
    ## facet_grid(rows = vars(name), scales = "free_y") +
    ## scale_x_reverse() +
    geom_line() +
    ## geom_point() +
    # fix the xlim so that when we add other data it doesn't rescale
    xlim(c(-1e3, 0))
  pl_refs
#+end_src

#+RESULTS:
[[file:imgs/c-output_s.png]]

**** [#A] read the final eccentricity, phi, precession
#+begin_src R :results none
  snv_out <- read_fwf("snvec-3.7.5/out.dat",
                     col_positions = fwf_empty("snvec-3.7.5/out.dat",
                                               col_names = c("t", "epl", "phi", "cp", "x")))
#+end_src

**** [#A] plot the final eccentricity, phi, precession
#+begin_src R :results output graphics file :file imgs/c-output_ee.png :width 700
  pl_ref <- snv_out |>
    pivot_longer(cols = epl:cp) |>
    ggplot(aes(-t / 1e3, value, colour = "Richard-C")) +
    facet_grid(rows = vars(name), scales = "free_y") +
    scale_x_reverse() +
    geom_line() +
    labs(x = "Age (Ma)")
    ## geom_point() +
    # fix the xlim so that when we add other data it doesn't rescale
    ## xlim(c(-1e3, 0))
  ## pl_ref
#+end_src

#+RESULTS:
[[file:imgs/c-output_ee.png]]

**** plot a histogram of the timesteps in the C-output
#+begin_src R :results output graphics file :file imgs/c-output_dt.png :width 700
  snv_out |>
    mutate(dt = t - lag(t)) |>
    ggplot(aes(dt)) +
    geom_histogram(binwidth = 0.001)
#+end_src

#+RESULTS:
[[file:imgs/c-output_dt.png]]

*** debug specific functions
[[file:snvec-3.7.5/snvec-3.7.5.c::Ilja's debugging scheme][Ilja's debugging scheme]]

* DONE read up on the deSolve package for R
CLOSED: [2023-04-10 Mon 15:43]
:PROPERTIES:
:CREATED:  [2023-03-24 Fri 12:02]
:END:
https://cran.r-project.org/package=deSolve
the implicit Runge-Kutta method RADAU (Hairer and Wanner 2010). The package contains also a de novo implementation of several Runge-Kutta methods (Butcher 1987; Press et al. 1992; Hairer, Norsett, and Wanner 2009).

** DONE calculate precession and obliquity/tilt based on values for \(E_{d}\) and \(T_{d}\)
CLOSED: [2023-03-29 Wed 14:09]
:PROPERTIES:
:CREATED:  [2023-03-23 Thu 11:46]
:END:
** DONE what are the parameters that are needed for the differential equations?
CLOSED: [2023-03-29 Wed 12:01]
:PROPERTIES:
:CREATED:  [2023-03-24 Fri 13:54]
:END:
** DONE reproduce their C-implementation that uses an input
CLOSED: [2023-04-06 Thu 16:33]
:PROPERTIES:
:CREATED:  [2023-03-30 Thu 11:30]
:END:
[[file:imgs/~/Downloads/compiledCode.pdf::25]]

#+begin_src R
  library(deSolve)
  SPCmod <- function(t, x, parms, input) {
    with(as.list(c(parms, x)), {
      import <- input(t)
      dS <- import - b * S * P + g * C # subtrate
      dP <- c * S * P - d * C * P      # producer
      dC <- e * P * C - f * C          # consumer
      res <- c(dS, dP, dC)
      list(res, signal = import)
    })
  }

  parms <- c(b = .1, c = .1, d = .1, e = .1, f = .1, g = 0)

  times <- seq(0, 100, .1)
  signal <- as.data.frame(list(times = times,
                               import = rep(0, length(times))))
  signal$import <- ifelse((trunc(signal$times) %% 2 == 0), 0, 1)
  sigimp <- approxfun(signal$times, signal$import, rule = 2)

  xstart <- c(S = 1, P = 1, C = 1)
  print(system.time(
    out <- ode(y = xstart, times = times,
               func = SPCmod, parms, input = sigimp)
  ))
  plot(out)
#+end_src
* [13/18] snvecR /works/                                      :prj:
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 14:52]
:END:

** compare c and R output
:PROPERTIES:
:CREATED:  [2023-03-31 Fri 10:24]
:END:
**** calculate snvec using the latest function
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 10:24]
:END:
#+begin_src R
  ## fin <- snvec(-1e3, 1, 0) # quick but short
  fin <- snvec(-1e5, 1, 0)
#+end_src

#+RESULTS:
#+begin_example
[1m[22mIntegration parameters:
[36m•[39m `tend` = -1000 kyr
[36m•[39m `ed` = 1
[36m•[39m `td` = 0
[36m•[39m `orbital_solution` = "ZB18a"
[36m•[39m `tres` = 0.4 kyr
[36m•[39m `tolerance` = 1e-07
[36mℹ[39m started at "2023-04-10 13:41:38"
[1m[22mFinal values:
[36m•[39m s[1][2][3]: 0.404197400723194 -0.0537088738295803 0.91303387030935
[36m•[39m s-error = |s|-1: -5.44863786333671e-05
[1m[22mFinal values:
[36m•[39m obliquity: 0.413056573207875 rad
[36m•[39m precession: -0.562236553023642 rad
[36mℹ[39m stopped at "2023-04-10 13:41:39"
[36mℹ[39m total duration: 1.1s
#+end_example

#+begin_src R
  write_rds(fin, "out/2023-04-10_unwrap-fix.rds")
#+end_src

#+RESULTS:

**** read in previous runs
#+begin_src R
  fin <- read_rds("out/2023-04-10_unwrap-fix.rds")
#+end_src

#+RESULTS:

look at different tolerances
#+begin_src R
  tol_1e07 <- read_rds("out/2023-04-04_normtol_1e-7.rds") |>
    mutate(tol = 1e-07) |>
    mutate(across(c(time, sx, sy, sz, age, epl), as.numeric))
  tol_1e10 <- read_rds("out/2023-04-04_lowtol.rds") |>
    mutate(tol = 1e-10) |>
    mutate(across(c(time, sx, sy, sz, age, epl), as.numeric))
  tol_1e12 <- read_rds("out/2023-04-04_superlowtol_1e-12.rds") |>
    mutate(tol = 1e-12) |>
    mutate(across(c(time, sx, sy, sz, age, epl), as.numeric))
  tol_1e03 <- read_rds("out/2023-04-05_hightol_1e-3.rds") |>
    mutate(tol = 1e-03) |>
    mutate(across(c(time, sx, sy, sz, age, epl), as.numeric))
#+end_src

#+RESULTS:
**** create plot
#+begin_src R
  ## pl_both_young
  pl_both <- pl_ref +
    geom_line(aes(x = age / 1e3, colour = "Ilja-R"),
              ## linetype = "dashed",
              data = fin |>
                select(age, time, tmp, epl, phi, cp) |>
                mutate(epl = as.double(epl)) |>
                pivot_longer(cols = c(epl, phi, cp)))
  pl_both_young <- pl_both + xlim(c(1, 0))
  pl_both_mid <- pl_both + xlim(c(66, 65))
  pl_both_old <- pl_both + xlim(c(100, 99))
#+end_src

#+RESULTS:
: [1m[22mScale for [32mx[39m is already present.
: Adding another scale for [32mx[39m, which will replace the existing scale.
: [1m[22mScale for [32mx[39m is already present.
: Adding another scale for [32mx[39m, which will replace the existing scale.
: [1m[22mScale for [32mx[39m is already present.
: Adding another scale for [32mx[39m, which will replace the existing scale.

#+begin_src R :results output graphics file :file imgs/2023-04-10_compare_c-R.png :width 1920 :height 1080
  ## pl_both_young +
  pl_both_mid +
  ## pl_both_old +
  theme(text = element_text(size = 20))
#+end_src

#+RESULTS:
[[file:imgs/2023-04-10_compare_c-R.png]]

**** interpolate C-output onto R grid and calculate differences
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 13:41]
:END:
#+begin_src R
  comp <- #bind_rows(
    # combine all tolerance experiments
    ## tol_1e03,
    ## tol_1e07,
    ## tol_1e10,
    ## tol_1e12
  ## ) |>
    fin |>
      mutate(across(c(time, sx, sy, sz, age, epl), as.numeric)) |>
    mutate(
      # add the interpolated C-output
      C_epl = approxdat(snv_out, "epl")(-age),
      C_phi = approxdat(snv_out, "phi")(-age),
      C_cp = approxdat(snv_out, "cp")(-age),
      ) |>
    mutate(
      # calculate differences
      epl_diff = epl - C_epl,
      phi_diff = phi - C_phi,
      cp_diff = cp - C_cp,
      # calculate difference as a fraction of the max value
      epl_pc = epl_diff / max(epl),
      phi_pc = phi_diff / max(phi),
      cp_pc = cp_diff / max(cp)
    )
#+end_src

#+RESULTS:

#+begin_src R
  # this is just to make the tickmarks and grid breaks different for each facet
  breaks_fun <- function(x, big = TRUE) {
    if (max(x) > 6.2) { # phi_diff
        out <- seq(-3, 6, 3)
    } else if (max(x) > 0.04) { # cp_diff
        out <- seq(-0.060, 0.060, 0.03)
    } else if (max(x) > 0.015) { # epl_diff
        out <- seq(-0.02, 0.02, 0.01)
    }
    if (!big) {
      out <- seq(min(out),max(out), diff(out)[1]/10)
    }
    out
  }

  # create the combined plot
  pl_diff <- comp |>
    # absolute diffs
    pivot_longer(ends_with("_diff")) |>
    # diff / max(x)
    ## mutate(epl_pc = as.double(epl_pc)) |>
    ## pivot_longer(ends_with("_pc")) |>
    ggplot(aes(x = age / 1e3, y = value## , col = factor(tol)
               )) +
    geom_line() +
    facet_grid(rows = vars(name), scales = "free_y") +
    labs(y = "R - C") +
    scale_y_continuous(breaks = breaks_fun, minor_breaks= ~breaks_fun(.x, FALSE))

  # create zoom-ins on the youngest, oldest, and Cretaceous 1 kyr
  pl_diff_old <- pl_diff + xlim(c(100, 99))
  pl_diff_mid <- pl_diff + xlim(c(66, 65))
  pl_diff_young <- pl_diff + xlim(c(1, 0))
  #+end_src

  #+RESULTS:

then render those 1 kyr
  #+begin_src R :results output graphics file :file imgs/2023-04-10_compare_c-R-diff.png :width 1920 :height 1080
    ## pl_diff_young
    ## pl_diff_mid
    pl_diff_old + labs(x = "Age (Ma)") + theme(text = element_text(size = 20))
#+end_src

#+RESULTS:
[[file:imgs/2023-04-10_compare_c-R-diff.png]]

#+begin_src R :results output graphics file :file imgs/compare_c-R-diff_hist.png :width 900
  comp |>
    pivot_longer(ends_with("_diff")) |>
    ggplot(aes(x = abs(value)## , fill = factor(tol)
               )) +
    ## geom_density(alpha = .3) +
    ## geom_histogram(alpha = .3) +
    ## stat_summary(aes(y = 0), fun = mean_cl_normal) +
    ## ggridges::geom_density_ridges() +
    ggdist::stat_halfeye(## aes(group = factor(tol),
                         ##     ## colour = factor(tol)
                         ##     ),
                         ## position = "dodge",
                         alpha = .4) +
    scale_x_sqrt() +
    ## scale_x_log10() +
    facet_grid(#rows = vars(factor(tol)),
               cols = vars(name),
               scales = "free", space = "free_y") +
    coord_cartesian(ylim = c(-.5, .6)) +
    theme(axis.title.y = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          panel.grid.major.y = element_blank(),
          panel.grid.minor.y = element_blank()) +
    labs(## fill = "Tolerance",
         x = "abs(diff) (note sqrt transform)")
#+end_src

#+RESULTS:
[[file:imgs/compare_c-R-diff_hist.png]]

#+begin_src R :results output graphics file :file imgs/compare_c-R-full_1e-10.png :width 1920 :height 1080
  library(patchwork)
  pl_both /
   (pl_both_old + pl_both_mid + pl_both_young) /
  pl_diff /
   (pl_diff_old + pl_diff_mid + pl_diff_young)
#+end_src

#+RESULTS:
[[file:imgs/compare_c-R-full.png]]

** DONE compare the C-output to the raw spin vector s
CLOSED: [2023-04-10 Mon 15:41]

*** DONE read in the raw spin vector s from the C-routine
CLOSED: [2023-04-10 Mon 15:41]
the raw spin vector s, added as something that we write to file myself (not sure if correct!)
#+begin_src R
  snv_sout <- read_table("snvec-3.7.5/s-out.dat",
                        col_names = c("time", "sx", "sy", "sz", "x")) |>
    # this is because there's some whitespace there?
    # note that t is in tmv / KY2D = in kyr
    select(-x)
#+end_src

#+RESULTS:
:
: [36m──[39m [1mColumn specification[22m [36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[39m
: cols(
:   time = [32mcol_double()[39m,
:   sx = [32mcol_double()[39m,
:   sy = [32mcol_double()[39m,
:   sz = [32mcol_double()[39m,
:   x = [33mcol_logical()[39m
: )

*** DONE plot the spin vector s together with the C-routine for easy inspection
CLOSED: [2023-04-10 Mon 15:41]
#+begin_src R :results output graphics file :output graphics file :file imgs/2023-03-29_output.png :width 700
  comb <- snv_sout |>
    mutate(code = "C") |>
    bind_rows(
      out |>
      as_tibble() |>
      select(time, sx, sy, sz) |>
      mutate(time = time / KY2D) |>
      mutate(code = "R") |>
      mutate(across(time:sz, as.numeric)))


  pl_s <- comb |>
    pivot_longer(cols = sx:sz) |>
    ggplot(aes(x = time, y = value, colour = name, linetype = code)) +
    geom_line() +
    geom_point() +
    annotate("rug",
             y = c(0.404360548210294,
                   -0.053622586775944,
                   0.913026378223150),
             sides = "l",
             colour = scales::hue_pal()(3),
             length = grid::unit(1, "cm"))
  pl_s
#+end_src

#+RESULTS:
[[file:imgs/2023-03-29_output.png]]

**** SOME make a plot of the difference between the two
:LOGBOOK:
- State "SOME"       from              [2023-04-04 Tue 11:15]
:END:
but they're not on the same timesteps so that would be annoying...


*** DONE make the figure interactive in the browser
CLOSED: [2023-04-10 Mon 15:41]
#+begin_src R :eval never
  plotly::toWebGL(plotly::ggplotly(pl_s, dynamicTicks = TRUE))
#+end_src

#+RESULTS:
: There were 15 warnings (use warnings() to see them)

** DONE make the R routine visually return the same spin vector as the C routine
CLOSED: [2023-04-04 Tue 09:27]
** WAIT [1/1] make the R routine return machine precision close to identical results to the C routine
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 09:27]
:END:
:LOGBOOK:
- State "WAIT"       from "DONE"       [2023-04-05 Wed 11:02]
- State "DONE"       from "WAIT"       [2023-04-05 Wed 11:02]
- State "WAIT"       from "NEXT"       [2023-04-04 Tue 15:33]
- State "NEXT"       from "WAIT"       [2023-04-04 Tue 13:39]
- State "WAIT"       from "NEXT"       [2023-04-04 Tue 12:51]
:END:
**** hmm it's not the fact that in the C routine he doesn't interpolate the results for hh and kk
- [X] check for a long run if the error stays 1e-3 or if it accumulates -> it accumulates, see figs:
  [[file:imgs/2023-04-04_compare-c-to-R_56-54Ma.png]]
   [[file:imgs/2023-04-04_compare-c-to-R_81-78Ma.png]]
   [[file:imgs/2023-04-04_compare-c-to-R_100-97Ma.png]]
- [X] compare C-code to this with times
- almost good enough. For more direct comparison:
- [X] interpolate C results into R timegrid
- [X] calculate the difference
- [X] plot the difference
- [X] do the same for the full solar system solution
**** DONE fix the unwrap function
CLOSED: [2023-04-10 Mon 10:36]
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 09:39]
:END:
** DONE now do the long run but with a lower tolerance
CLOSED: [2023-04-05 Wed 13:47]
**** 1e-10
#+begin_src R
  lowtol <- snvec(-1e5, 1, 0, tolerance = 1e-10)
  write_rds(lowtol, "out/2023-04-04_lowtol.rds")
#+end_src

#+RESULTS:
: This is snvec.r VERSION: 3.7.5 2023-03-29
: Richard E. Zeebe
: Ilja J. Kocken
: Integration parameters:
:  tend = -1e+05 kyr
:  tres = 0.4 kyr
:  Ed = 1
:  Td = 0
: Final values s[1][2][3]; s-error = |s|-1:
: -0.164426067894575 0.406888350901304 0.898597654927192
: 3.59030270373761e-05
: Final values obliquity, precession (rad):
: 0.3899853310553 1.88486960858406

**** 1e-12
#+begin_src R
  superlowtol <- snvec(-1e5, 1, 0, tolerance = 1e-12)
  write_rds(superlowtol, "out/2023-04-04_superlowtol_1e-12.rds")
#+end_src

#+RESULTS:
: This is snvec.r VERSION: 3.7.5 2023-03-29
: Richard E. Zeebe
: Ilja J. Kocken
: Integration parameters:
: tend = -1e+05 kyr
: tres = 0.4 kyr
: Ed = 1
: Td = 0
:     user   system  elapsed
: 3246.787    0.342 3255.612
: Final values s[1][2][3]; s-error = |s|-1:
: -0.143109361596917 0.419908122882867 0.896212779992251
: 2.34030537171748e-07
: Final values obliquity, precession (rad):
: 0.390596711702826 1.8189284314666

**** 1e-07
#+begin_src R
  normtol <- snvec(-1e5, 1, 0, tolerance = 1e-7)
  write_rds(normtol, "out/2023-04-04_normtol_1e-7.rds")
#+end_src

#+RESULTS:
#+begin_example
Integration parameters:
 tend = -1e+05 kyr
 Ed = 1
 Td = 0
 orbital_solution = ZB18a
 tres = 0.4 kyr
 tolerance = 1e-07
starting at Wed Apr  5 09:55:48 2023
   user  system elapsed
 24.575   0.010  24.699
Final values s[1][2][3]; s-error = |s|-1:
-0.181186234717299 0.377666080230894 0.902100420308931
-0.00539189218589675
Final values obliquity, precession (rad):
0.389933827834007 1.96689170415452
stopped at Wed Apr  5 09:56:46 2023
#+end_example
**** 1e-03
#+begin_src R
  hightol <- snvec(-1e5, 1, 0, tolerance = 1e-3)
  write_rds(hightol, "out/2023-04-05_hightol_1e-3.rds")
#+end_src

#+RESULTS:
#+begin_example
Integration parameters:
 tend = -1e+05 kyr
 Ed = 1
 Td = 0
 orbital_solution = ZB18a
 tres = 0.4 kyr
 tolerance = 0.001
started at 2023-04-05 10:12:39
   user  system elapsed
 22.583   0.000  22.659
Final values s[1][2][3]; s-error = |s|-1:
-0.1069277059072 0.423122991463078 0.893789976171586
-0.00535075443649757
Final values obliquity, precession (rad):
0.392041645216932 1.72794012401827
stopped at Wed Apr  5 10:13:33 2023
total duration 54.119035243988
#+end_example

**** make the comparison between resolutions
** DONE [3/3] make the R routine return the same values for precession and obliquity
CLOSED: [2023-04-04 Tue 13:38]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 09:29]
:END:
- [X] epl
- [X] cp
- [X] phi => there's something weird going on with the mapping to -pi to pi, but it works if I fix that manually
** DONE make a function out of snvec so it's easy to vary Td and Ed
CLOSED: [2023-04-04 Tue 18:10]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 09:28]
:END:
#+begin_src R
  ## devtools::load_all()
  test <- snvec(-1e3, 1, 0)
#+end_src

#+RESULTS:
#+begin_example
Integration parameters:
 tend = -1000 kyr
 Ed = 1
 Td = 0
 orbital_solution = ZB18a
 tres = 0.4 kyr
 tolerance = 1e-07
starting at Tue Apr  4 23:06:34 2023
   user  system elapsed
  0.211   0.000   0.213
Final values s[1][2][3]; s-error = |s|-1:
0.404197400723194 -0.0537088738295803 0.91303387030935
-5.44863786333671e-05
Final values obliquity, precession (rad):
0.413056573207875 -0.562236553023642
stopped at Tue Apr  4 23:06:35 2023
#+end_example

rldpeace

** SOME [3/4] make the La2011 solution obl + precession available? :prj:
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 10:35]
:END:
:LOGBOOK:
- State "SOME"       from "NEXT"       [2023-04-11 Tue 16:37]
- State "NEXT"       from "SOME"       [2023-04-10 Mon 12:19]
- State "SOME"       from "NEXT"       [2023-04-04 Tue 10:36]
:END:
but NOT the 2004 solutions! divergence times at ~40 Ma with 2011 or ZB18a

if I do, make sure to update the docs for snvec and parameter "orbital_solution"
http://vo.imcce.fr/insola/earth/online/earth/earth.html

*** SOME check out the Wu paper / acycle
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 10:37]
:END:
:LOGBOOK:
- State "SOME"       from "SOME"       [2023-04-10 Mon 16:54]
- State "SOME"       from "NEXT"       [2023-04-04 Tue 10:39]
:END:
they apply the Laskar fortran routine from 92/93 to calculate precession/obliquity for the La2011 but that's in the ecliptic reference plane rather than the intertial reference frame.

*** DONE download the required files
CLOSED: [2023-04-10 Mon 16:54]

*** DONE ask Richard which corresponds to mean longitude
CLOSED: [2023-04-11 Tue 16:37]
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 16:55]
:END:
:LOGBOOK:
- State "DONE"       from "WAIT"       [2023-04-11 Tue 16:37]
- State "WAIT"       from "NEXT"       [2023-04-10 Mon 17:48]
:END:

*** CANC reverse engineer the parameters
CLOSED: [2023-04-11 Tue 16:37]
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 16:54]
:END:
- [ ] lph
- [ ] inc
- [ ] lan
** SOME make it possible for snvec to write to file
:LOGBOOK:
- State "SOME"       from              [2023-04-05 Wed 13:20]
:END:
add a file = NULL argument
at the end
#+begin_src R :eval never :tangle no
if(!is.null(file)) { readr::write_rds(fin, file = file) }
#+end_src

** DONE [3/3] add options for which output to return
CLOSED: [2023-04-11 Tue 16:36]
:LOGBOOK:
- State "DONE"       from "SOME"       [2023-04-11 Tue 16:36]
- State "SOME"       from              [2023-04-10 Mon 15:37]
:END:
- [X] the raw spin vector output = ode
- [X] the full output with all columns = all
- [X] only the same output as the C-routine (default) = nice
** analyse the ODE solver for problems
:PROPERTIES:
:CREATED:  [2023-04-03 Mon 14:38]
:END:
#+begin_src R :tangle no
  diagnostics(out)
#+end_src

#+RESULTS:
#+begin_example

--------------------
lsode return code
--------------------

  return code (idid) =  2
  Integration was successful.

--------------------
INTEGER values
--------------------

  1 The return code : 2
  2 The number of steps taken for the problem so far: 250064
  3 The number of function evaluations for the problem so far: 311277
  5 The method order last used (successfully): 5
  6 The order of the method to be attempted on the next step: 5
  7 If return flag =-4,-5: the largest component in error vector 0
  8 The length of the real work array actually required: 58
  9 The length of the integer work array actually required: 23
 14 The number of Jacobian evaluations and LU decompositions so far: 12539

--------------------
RSTATE values
--------------------

  1 The step size in t last used (successfully): -8.504139e-06
  2 The step size to be attempted on the next step: -8.504139e-06
  3 The current value of the independent variable which the solver has reached: -3.6525e+10
  4 Tolerance scale factor > 1.0 computed when requesting too much accuracy: 0
#+end_example

* [2/2] snvecR runs /fast/                                  :prj:
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:34]
:END:
** DONE play around with the different ODE solver algorithms to figure out which one is fastest
CLOSED: [2023-04-04 Tue 09:28]
looks like the stiff solver bdf is fastest!

*** read in previous results
#+begin_src R :eval never :tangle no
  make_combinable <- function(dat, method) {
    dat |>
     as_tibble() |>
     mutate(across(time:sz, as.double)) |>
     mutate(method = method)
  }
#+end_src

#+RESULTS:

#+begin_src R :eval never :tangle no
  ## out <- read_rds("out/2023-03-29_out.rds")
  rk4 <- read_rds("out/2023-03-30_out.rds") |> make_combinable("rk4") # rk4, 1000 steps
  ode23 <- read_rds("out/2023-03-31_out.rds") |> make_combinable("ode23")# ode23 5001 steps, intended for non-stiff problems!
  ode45 <- read_rds("out/2023-04-01_out-ode45.rds") |> make_combinable("ode45") # ode45 5001 steps
  bdf <- read_rds("out/2023-04-01_out-bdf.rds") |> make_combinable("bdf")     # bdf stiff 2523
  daspk <- read_rds("out/2023-04-02_out-daspk.rds") |> make_combinable("daspk")     # stiff 2523
  lsoda <- read_rds("out/2023-04-02_out-lsoda.rds") |> make_combinable("lsoda")     # stiff 2523
#+end_src

#+RESULTS:

#+begin_src R :tangle no :eval never
  allout <- bind_rows(rk4, ode23, ode45, bdf, daspk, lsoda)
#+end_src

#+RESULTS:
: Error in list2(...) : object 'ode23' not found

*** plot the different methods
:PROPERTIES:
:CREATED:  [2023-04-02 Sun 11:24]
:END:
the different methods (other then timestep) result in identical results!!

#+begin_src R :results output graphics file :output graphics file :file imgs/2023-04-02_all-output.png :width 700 :eval never
  allout |>
    pivot_longer(cols = sx:sz) |>
    ggplot(aes(x = time, y = value, colour = name, linetype = method)) +
    geom_line() +
    geom_point() +
    annotate("rug",
             y = c(0.404360548210294,
                   -0.053622586775944,
                   0.913026378223150),
             sides = "r",
             colour = c("red", "green", "blue"),
             length = grid::unit(1, "cm")) +
   coord_cartesian(xlim = c(-20*KY2D, 0))
#+end_src

#+RESULTS:
[[file:imgs/2023-04-02_all-output.png]]

** CANC consider whether it's useful to build a Cpp implementation of our function?
CLOSED: [2023-04-06 Thu 16:33]
probably not needed, 30s or so for 100 Myr is fast enough
* [8/9] snvecR is /fun/                                       :prj:
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:35]
:END:
** [6/6] calculate for grids of Td and Ed                   :prj:
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 09:29]
:END:
:LOGBOOK:
- State "DONE"       from "WAIT"       [2023-04-05 Wed 15:13]
- State "WAIT"       from "DONE"       [2023-04-05 Wed 13:16]
:END:

*** DONE create the desired grid for Td and Ed
CLOSED: [2023-04-06 Thu 14:27]
:PROPERTIES:
:CREATED:  [2023-04-05 Wed 11:03]
:END:
#+begin_src R :output none :eval never
  snvec_tail <- function(...) {
      # do the fit with the parameters in ...
      snvec(...) |>
      # save only the last 1000 values, that's where the differences are the worst
      tail(n = 1000) |>
      # convert deSolve columns to numerics for easy combinations
      mutate(across(c(time, sx, sy, sz, age, epl), as.numeric))
  }

  # same grid as in Zeebe & Lourens 2022 table 2: 10.1029/2021PA004349
  biggrid <- expand.grid(Td = c(0, 0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2),
              Ed = c(1.000, 0.998, 1.005, 1.012)) |>
    # that's 32 rows
    as_tibble() |>
    # for now only for 1000 years so it's fast
    ## mutate(tol = 1e-4, tend = -1e3) |>
    # the real deal, full results at medium tolerance
    # this will run but will run out of memory too...
    # limit results to final 1000 timesteps (400 kyr) or so?
    mutate(tol = 1e-7, tend = -1e5) |>
    # apply our new function!
    mutate(sol = pmap(list(td = Td, ed = Ed, tend = tend, tolerance = tol),
                      .f = snvec_tail, quiet = TRUE,
                      .progress = "snvec on a grid")) |>
    write_rds("out/2023-04-05_biggrid.rds")
#+end_src

#+begin_src R
   biggrid <- read_rds("out/2023-04-05_biggrid.rds")
#+end_src

#+RESULTS:

#+begin_src R
  # unnest the new list column
  expanded <- biggrid |>
    unnest(sol)
#+end_src

#+RESULTS:
*** DONE plot the results
CLOSED: [2023-04-06 Thu 14:27]
#+begin_src R :results output graphics file :file imgs/2023-04-05_experimental-grid_full.png :width 1920 :height 1080
  # then make a plot
  expanded |>
    ggplot(aes(x = age, y = cp,
               colour = factor(Td),
               linetype = factor(Ed))) +
    scale_x_reverse("Age (ka)") +
    ## facet_grid(rows = vars(Ed)) +
    facet_grid(rows = vars(Td)) +
    geom_line() +
    geom_line(aes(y = eei))
#+end_src

#+RESULTS:
[[file:imgs/2023-04-05_experimental-grid_full.png]]

*** DONE plot the results for phi
CLOSED: [2023-04-06 Thu 14:27]
#+begin_src R :results output graphics file :file imgs/2023-04-05_experimental-grid_phi.png :width 1920 :height 1080
  # then make a plot
  expanded |>
    ggplot(aes(x = age, y = phi,
               colour = factor(Td),
               linetype = factor(Ed))) +
    scale_x_reverse("Age (ka)") +
    ## facet_grid(rows = vars(Ed)) +
    facet_grid(rows = vars(Td)) +
    geom_line()
#+end_src

#+RESULTS:
[[file:imgs/2023-04-05_experimental-grid_phi.png]]

*** DONE bin the results
CLOSED: [2023-04-06 Thu 14:28]
#+begin_src R :results output graphics file :file imgs/2023-04-05_experimental-grid_full_bin.png :width 700
  expanded |>
    ggplot(aes(x = cp,
               fill = factor(Td)## ,
               ## group = factor(Ed)
               )) +
    ## facet_grid(rows = vars(Td)) +
    ## geom_histogram() +
    ggdist::stat_halfeye(alpha = .4)
#+end_src

#+RESULTS:
[[file:imgs/2023-04-05_experimental-grid_full_bin.png]]

*** DONE migrate this to a vignette
CLOSED: [2023-04-11 Tue 17:36]
see [[file:vignettes/analyze_grid_td-ed.Rmd]]

*** CANC share the computed output grids
CLOSED: [2023-04-11 Tue 17:37]
:PROPERTIES:
:CREATED:  [2023-03-23 Thu 11:46]
:END:
:LOGBOOK:
- State "CANC"       from "SOME"       [2023-04-11 Tue 17:37]
- State "SOME"       from              [2023-03-24 Fri 13:59]
:END:
** SOME visualize results: a heat map?
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 09:29]
:END:
:LOGBOOK:
- State "SOME"       from "NEXT"       [2023-04-05 Wed 15:55]
:END:
for that I'd need to have the difference function with a record
*** DONE make the text of my plots bigger for Richard
CLOSED: [2023-04-11 Tue 16:38]
:PROPERTIES:
:CREATED:  [2023-04-05 Wed 20:19]
:END:

** CANC add a progress bar
CLOSED: [2023-04-06 Thu 14:35]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 18:23]
:END:
:LOGBOOK:
- State "CANC"       from "SOME"       [2023-04-06 Thu 14:35]
- State "SOME"       from              [2023-04-04 Tue 18:23]
:END:
https://github.com/r-lib/progress#readme
this is easy to do for a purrr call if we're solving many different version, but harder if we want to do it for a single ODE solver
* [31/42] snvecR is /published/ on CRAN, github, zenodo       :prj:
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 09:27]
:END:
** SOME reduce dependencies
:PROPERTIES:
:CREATED:  [2023-03-31 Fri 12:23]
:END:
:LOGBOOK:
- State "SOME"       from              [2023-03-31 Fri 12:23]
:END:

** DONE double-check if we like the name
CLOSED: [2023-04-06 Thu 16:41]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:41]
:END:
#+begin_src R
available::available("snvecR")
#+end_src

#+RESULTS:
#+begin_example
── snvecR ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Name valid: ✔
Available on CRAN: ✔
Available on Bioconductor: ✔
Available on GitHub:  ✔
Abbreviations: http://www.abbreviations.com/snvec
Wikipedia: https://en.wikipedia.org/wiki/snvec
Wiktionary: https://en.wiktionary.org/wiki/snvec
Sentiment:???
#+end_example
** DONE [0/0] write good documentation                  :prj:
CLOSED: [2023-04-06 Thu 16:37]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 14:51]
:END:
*** DONE document all function parameters correctly
CLOSED: [2023-04-05 Wed 13:45]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 18:45]
:END:
https://style.tidyverse.org/documentation.html#documenting-parameters
*** DONE write nice error messages in the tidyverse style
CLOSED: [2023-04-05 Wed 12:27]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 18:44]
:END:
https://style.tidyverse.org/error-messages.html
and info messages
*** docs tips from pkgs
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 18:48]
:END:
https://r-pkgs.org/man.html
*** DONE add return docs to each function
CLOSED: [2023-04-05 Wed 13:45]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 18:46]
:END:
** DONE [3/3] make a good README rmd -> md file
CLOSED: [2023-04-06 Thu 16:37]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:14]
:END:
*** DONE I've just done use_readme_rmd and filled out the basics
CLOSED: [2023-04-06 Thu 16:14]
#+begin_src R
  usethis::use_readme_rmd()
#+end_src
*** DONE render to md
CLOSED: [2023-04-06 Thu 16:15]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:14]
:END:
#+begin_src R
  devtools::build_readme()
#+end_src

#+RESULTS:
#+begin_example
[1m[22m[36mℹ[39m Installing [34msnvecR[39m in temporary library
[1m[22m[36mℹ[39m Building [34m/home/japhir/SurfDrive/Postdoc1/prj/2023-03-23_snvec-R/README.Rmd[39m
/usr/bin/pandoc: error while loading shared libraries: libHShslua-classes-2.3.0-JeVSVZbMagbuc0D8DLXfK-ghc9.0.2.so: cannot open shared object file: No such file or directory
Error in system(paste(shQuote(path), "--version"), intern = TRUE) :
  error in running command
[1m[33mError[39m[22m:
[33m![39m in callr subprocess.
[1mCaused by error[22m in `system(paste(shQuote(path), "--version"), intern = TRUE)`:
[33m![39m error in running command
[36mℹ[39m See `$stdout` for standard output.
[90mType .Last.error to see the more details.[39m
#+end_example

*** DONE use badges
CLOSED: [2023-04-06 Thu 16:19]
#+begin_src R
  usethis::use_cran_badge()
#+end_src
** DONE [0/0] add github actions
CLOSED: [2023-04-06 Thu 16:37]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:19]
:END:
#+begin_src R
  use_github_action("check-standard")
#+end_src

#+RESULTS:
: [32m✔[39m Creating [34m'.github/'[39m
: [32m✔[39m Adding [34m'^\\.github$'[39m to [34m'.Rbuildignore'[39m
: [32m✔[39m Adding [34m'*.html'[39m to [34m'.github/.gitignore'[39m
: [32m✔[39m Creating [34m'.github/workflows/'[39m
: [32m✔[39m Saving [34m'r-lib/actions/examples/check-standard.yaml@v2'[39m to [34m'.github/workflows/check-standard.yaml'[39m
: [31m•[39m Learn more at <https://github.com/r-lib/actions/blob/v2/examples/README.md>.

learn more at
https://github.com/r-lib/actions/blob/v2/examples/README.md
** [15/17] write tests for each component                   :prj:
*** DONE test qinterp
CLOSED: [2023-04-06 Thu 16:38]
*** DONE tests euler
CLOSED: [2023-04-06 Thu 16:38]
*** DONE [#B] fix unwrap tests
CLOSED: [2023-04-10 Mon 10:44]
:PROPERTIES:
:CREATED:  [2023-04-05 Wed 13:45]
:END:
[[file:tests/testthat/test-unwrap.R]]
**** DONE change the test inputs to only vary between -180 and +180
CLOSED: [2023-04-10 Mon 09:42]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:42]
:END:
- find the indices in lan where it flips: there happens to be one super early!
#+begin_src R
  ZB18a |>
    slice(1:5) |>
    ggplot(aes(seq_len(5), y = lan)) +
    geom_line()
#+end_src

#+RESULTS:

- in the C-routine
**** DONE [#A] compare unwrap to C output
CLOSED: [2023-04-10 Mon 10:44]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 18:30]
:END:
it's NOT THE FUCKING SAME!!!
#+begin_src R
  wrap <- read_fwf("snvec-3.7.5/out-wrap.dat",
                   col_positions = fwf_empty("snvec-3.7.5/out-wrap.dat",
                                             col_names = c(#"time",
                                               "lphu", "lanu"))) |>
     mutate(t = ZB18a$t, age = ZB18a$age)
#+end_src

#+begin_src R
  ZB18a |>
    mutate(lanu = unwrap(lan)) |>
    ggplot(aes(x = -age, y = lan)) +
    geom_line() +
    geom_line(aes(x = -age, y = lanu, colour = "Richard-C"), data = wrap) +
    geom_line(aes(x = -age, y = lanu, colour = "Ilja-R")) +
    xlim(c(-1e3, 0))
#+end_src

it's still super different! :O am I resolving it on tmv = the output time scale in stead of the solution time scale? does it depend on Ed Td somehow?

ok I was reporting it as a function of tmv, not as the OS's timesteps.
Ditched C's output of timesteps and pasted it back from the OS, now it's identical.

*** NEXT [10/11] write test for snvec itself
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:38]
:END:
**** [9/9] returns errors with wrong inputs?
:LOGBOOK:
- State "DONE"       from "SOME"       [2023-04-10 Mon 15:44]
- State "SOME"       from              [2023-04-06 Thu 16:38]
:END:
***** DONE orbital solution
CLOSED: [2023-04-10 Mon 15:45]
it's either La11 or ZB18a
***** DONE tend >= 0
CLOSED: [2023-04-10 Mon 15:45]
***** DONE tend < min(dat$t / KY2D)
CLOSED: [2023-04-10 Mon 15:45]
***** DONE tres < tend
CLOSED: [2023-04-10 Mon 15:45]
***** DONE tres > 0
CLOSED: [2023-04-10 Mon 15:46]
***** DONE ed range
CLOSED: [2023-04-10 Mon 16:17]
***** DONE td range
CLOSED: [2023-04-10 Mon 16:17]
***** DONE tolerance somewhere between 1e-3 and 1e-12
CLOSED: [2023-04-10 Mon 15:59]
***** CANC quiet = T or F
CLOSED: [2023-04-10 Mon 15:48]
default error is good enough
Error in !quiet : invalid argument type
Error in if (!quiet) { : missing value where TRUE/FALSE needed
**** DONE test cached correct outputs
CLOSED: [2023-04-10 Mon 14:24]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 16:39]
:END:
using cached version right now
**** NEXT test correct outputs vs. C-routine?
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 14:24]
:END:
** DONE move the code out of README.org for reals -> pkg structure is single source of truth
CLOSED: [2023-04-05 Wed 20:19]
:PROPERTIES:
:CREATED:  [2023-04-04 Tue 18:49]
:END:
:LOGBOOK:
- State "DONE"       from "SOME"       [2023-04-05 Wed 20:19]
- State "SOME"       from              [2023-04-04 Tue 18:49]
:END:

** [0/7] make the package citable
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 14:22]
:END:
fixed [[file:inst/CITATION]] so that it works
used R package citation::r2cff() to generate a template cff file

*** NEXT include proper way to cite the package
still need to include this in the DESCRIPTION etc.
or there was a package loading thing?

#+begin_quote
When using snvec, cite as:

A deep-time dating tool for paleo-applications utilizing obliquity
and precession cycles: The role of dynamical ellipticity and tidal
dissipation, Richard E. Zeebe and Lucas J. Lourens, Paleoceanography
and Paleoclimatology, 2022.

Richard E. Zeebe
School of Ocean and Earth
Science and Technology
University of Hawaii at Manoa
1000 Pope Road, MSB 504
Honolulu, HI 96822, USA
email: zeebe@soest.hawaii.edu
#+end_quote

*** NEXT update CITATION to cite the package on CRAN itself
:PROPERTIES:
:CREATED:  [2023-04-05 Wed 15:55]
:END:
[[file:~/SurfDrive/Postdoc1/prj/2023-03-23_snvec-R/inst/CITATION][file:~/SurfDrive/Postdoc1/prj/2023-03-23_snvec-R/inst/CITATION]]

*** NEXT update CFF file
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 12:10]
:END:
[[file:CITATION.cff]]

*** NEXT upload the code to github
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 12:10]
:END:

*** NEXT add a binderhub badge to load it into an interactive online RStudio environment
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 17:49]
:END:

*** NEXT create zenodo integration -- get doi
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 12:10]
:END:

*** NEXT get zenodo badge and add to README
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 12:10]
:END:

** DONE [0/0] build the R package cleanly =devtools:check()=
CLOSED: [2023-04-10 Mon 17:49]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 09:02]
:END:
#+begin_src R
  devtools::check()
#+end_src

#+begin_src R :eval query
  rcmdcheck::rcmdcheck()
#+end_src

#+begin_example
✔  checking whether the namespace can be unloaded cleanly (560ms)
W  checking loading without being on the library search path
   Error: package or namespace load failed for ‘snvecR’ in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]):
    there is no package called ‘cli’
   Execution halted

   It looks like this package has a loading problem when not on .libPaths:
   see the messages for details.
#+end_example

I deleted =R_LIBS= from my [[file:~/.Renviron]]

** [4/5] include the BIG dataset                            :prj:
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 14:33]
:END:
[[file:data-raw/ZB18a.R]]
typically should be < 1 MB!
https://r-pkgs.org/data.html

*** notes on how to include data in an R package
see https://r-pkgs.org/data.html for how to include data in an R package

*** notes on package size for CRAN submission
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 15:44]
:END:
#+begin_quote
Generally, package data should be smaller than a megabyte - if it’s larger you’ll need to argue for an exemption. This is usually easier to do if the data is in its own package and won’t be updated frequently, i.e. if you approach this as a dedicated “data package”. For reference, the babynames and nycflights packages have had a release once every one to two years, since they first appeared on CRAN.

If you are bumping up against size issues, you should be intentional with regards to the method of data compression. The default for usethis::use_data(compress =) is “bzip2”, whereas the default for save(compress =) is (effectively) “gzip”, and “xz” is yet another valid option.

You’ll have to experiment with different compression methods and make this decision empirically. tools::resaveRdaFiles("data/") automates this process, but doesn’t inform you of which compression method was chosen. You can learn this after the fact with tools::checkRdaFiles(). Assuming you are keeping track of the code to generate your data, it would be wise to update the corresponding use_data(compress =) call below data-raw/ and re-generate the .rda cleanly.
#+end_quote

*** how big is it in-memory?
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 15:47]
:END:
#+begin_src R
  lobstr::mem_used()
  ## devtools::load_all("~/SurfDrive/Postdoc1/prj/2023-03-23_snvec-R")
  ## library("snvec")
  lobstr::mem_used()
  invisible(ZB18a)
  lobstr::mem_used()
#+end_src

#+RESULTS:
: 35.18 MB
: [1m[22m[36mℹ[39m Loading [34msnvecR[39m
: 107.87 MB
: 107.87 MB

*** DONE try out different compression algorithms
CLOSED: [2023-04-06 Thu 14:59]
xz is smallest, but still 12 MB

*** CANC is it useful to convert it to a matrix instead?
CLOSED: [2023-04-10 Mon 17:50]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 15:45]
:END:
not really
*** DONE ask Richard to host the textfile on his website
CLOSED: [2023-04-10 Mon 10:44]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 15:00]
:END:
:LOGBOOK:
- State "DONE"       from "SOME"       [2023-04-10 Mon 10:44]
- State "SOME"       from              [2023-04-06 Thu 14:59]
:END:
it's 36 MB raw
[[file:snvec-3.7.5/ems-plan3.dat]]

he already does, it's hidden in OS
http://www.soest.hawaii.edu/oceanography/faculty/zeebe_files/Astro/PrecTilt/OS/ZB18a/ems-plan3.dat

*** DONE write functions that execute the first time to download the data from the website and store it in the user's folder?
CLOSED: [2023-04-10 Mon 12:09]
:PROPERTIES:
:CREATED:  [2023-04-06 Thu 15:00]
:END:
:LOGBOOK:
- State "DONE"       from "SOME"       [2023-04-10 Mon 12:09]
- State "SOME"       from              [2023-04-06 Thu 14:59]
:END:

put it in zzz.R
.onLoad()

*** NEXT decide whether to use the onload/save to cache thing or to include the data in /data
:PROPERTIES:
:CREATED:  [2023-04-10 Mon 12:09]
:END:
[[file:R/zzz.R]]
