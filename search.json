[{"path":"https://japhir.github.io/snvecR/articles/analyze_grid_td-ed.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyze a grid of Td and Ed values","text":"function snvec() uses parameters full orbital solution (OS, ZB18a) combination values tidal dissipation (Td) dynamical ellipticity (Ed) calculate precession obliquity (tilt). vignette show go using snvec() range input values.","code":""},{"path":"https://japhir.github.io/snvecR/articles/analyze_grid_td-ed.html","id":"create-a-grid-of-td-and-ed","dir":"Articles","previous_headings":"","what":"Create a grid of Td and Ed","title":"Analyze a grid of Td and Ed values","text":"create grid input values Td Ed. values grid based Zeebe Lourens 2022 table 2. now add columns important parameter values, clear output inputs .","code":"biggrid <- expand.grid(Td = c(0, 0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2),               Ed = c(1.000, 0.998, 1.005, 1.012)) |>     as_tibble()     # that's 32 rows biggrid #> # A tibble: 32 × 2 #>       Td    Ed #>    <dbl> <dbl> #>  1   0   1     #>  2   0.5 1     #>  3   0.7 1     #>  4   0.8 1     #>  5   0.9 1     #>  6   1   1     #>  7   1.1 1     #>  8   1.2 1     #>  9   0   0.998 #> 10   0.5 0.998 #> # ℹ 22 more rows biggrid <- biggrid |>     # for now only for 1000 years at very high tolerance so it's fast     mutate(tol = 1e-4, tend = -1e3)     # this would be the real deal, the full 100 Ma--0 results at medium     # tolerance.     ## mutate(tol = 1e-7, tend = -1e5)"},{"path":"https://japhir.github.io/snvecR/articles/analyze_grid_td-ed.html","id":"approach","dir":"Articles","previous_headings":"","what":"Approach","title":"Analyze a grid of Td and Ed values","text":"’re going use purrr’s pmap() function , allows apply function given list input values. See chapter iteration r4ds details. create list-column results. apply snvec() function directly full 100 Myr, quickly make R run memory, storing timesteps 32 experiments. Instead, write wrapper function stores latest N timesteps.","code":"snvec_tail <- function(..., n = 100) {   # do the fit with the parameters in ...   snvec(...) |>     # save only the last n values, that's where the differences are greatest     tail(n = n) }"},{"path":"https://japhir.github.io/snvecR/articles/analyze_grid_td-ed.html","id":"compute-obliquity-and-precession","dir":"Articles","previous_headings":"","what":"Compute obliquity and precession","title":"Analyze a grid of Td and Ed values","text":"Now can apply function grid. read old results (9MB -disk final 1000 timesteps full 100 Myr simulations).","code":"biggrid <- biggrid |>     # apply our new function!     mutate(sol = pmap(list(td = Td, ed = Ed, tend = tend, tolerance = tol),                       .f = snvec_tail,                       # additional parameters to snvec_tail can go after!                       quiet = TRUE, output = \"nice\", n = 100,                       # I would strongly recommend against increasing the                       # resolution too much, but for speed/illustration we                       # prefer to do it here                       tres = 5,                       # interactively this makes a nice progress bar                       .progress = \"snvec on a grid\")) #|> #> snvec on a grid ■■                                 3% |  ETA:  2m #> snvec on a grid ■■■                                6% |  ETA:  1m #> snvec on a grid ■■■■■■■■■■■                       34% |  ETA: 13s #> snvec on a grid ■■■■■■■■■■■■■■■■■■■               59% |  ETA:  7s #> snvec on a grid ■■■■■■■■■■■■■■■■■■■■■■■■■■        84% |  ETA:  2s #> Warning: There were 24 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `sol = pmap(...)`. #> Caused by warning: #> ! Tidal dissipation likely varied between 0 and 1! #> ℹ `td` = 1.1 #> • See Zeebe & Lourens 2022 Pal&Pal <https://doi.org/10.1029/2021PA004349> #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 23 remaining warnings.      # normally we would save the results to file, because these take quite a     # long time to calculate!     ## write_rds(\"out/2023-04-05_biggrid.rds\") biggrid <- read_rds(\"out/2023-04-05_biggrid.rds\")"},{"path":"https://japhir.github.io/snvecR/articles/analyze_grid_td-ed.html","id":"inspect-results","dir":"Articles","previous_headings":"","what":"Inspect results","title":"Analyze a grid of Td and Ed values","text":"Let’s look structure output: can see list column sol result! ’d like access raw output, use unnest(). Let’s make figure final values.  Now analysis can begin! finish vignette.","code":"glimpse(biggrid) #> Rows: 32 #> Columns: 5 #> $ Td   <dbl> 0.0, 0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 0.0, 0.5, 0.7, 0.8, 0.9, … #> $ Ed   <dbl> 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.998, 0.… #> $ tol  <dbl> 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e… #> $ tend <dbl> -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1… #> $ sol  <list> [<tbl_df[100 x 6]>], [<tbl_df[100 x 6]>], [<tbl_df[100 x 6]>], [… expanded <- biggrid |>   unnest(sol) expanded #> # A tibble: 3,200 × 10 #>       Td    Ed    tol  tend       time   age    eei   epl    phi        cp #>    <dbl> <dbl>  <dbl> <dbl>      <dbl> <dbl>  <dbl> <dbl>  <dbl>     <dbl> #>  1     0     1 0.0001 -1000 -184451250   505 0.0319 0.407 -2.16  -0.0304   #>  2     0     1 0.0001 -1000 -186277500   510 0.0290 0.400 -0.932 -0.0115   #>  3     0     1 0.0001 -1000 -188103750   515 0.0254 0.396  0.317  0.0220   #>  4     0     1 0.0001 -1000 -189930000   520 0.0212 0.399  1.57   0.0131   #>  5     0     1 0.0001 -1000 -191756250   525 0.0169 0.407  2.81  -0.0103   #>  6     0     1 0.0001 -1000 -193582500   530 0.0135 0.417 -2.26  -0.0131   #>  7     0     1 0.0001 -1000 -195408750   535 0.0121 0.422 -1.07  -0.00388  #>  8     0     1 0.0001 -1000 -197235000   540 0.0136 0.419  0.115  0.00839  #>  9     0     1 0.0001 -1000 -199061250   545 0.0171 0.410  1.32   0.0166   #> 10     0     1 0.0001 -1000 -200887500   550 0.0214 0.399  2.55   0.000531 #> # ℹ 3,190 more rows expanded |>   ggplot(aes(x = age, y = cp,              colour = factor(Td),              linetype = factor(Ed))) +   scale_x_reverse(\"Age (ka)\") +   facet_grid(rows = vars(Td)) +   geom_line() +   # add eccentricity   geom_line(aes(y = eei), colour = \"black\") +   labs(y = \"Climatic precession\",        colour = \"Tidal dissipation\",        linetype = \"Dynamical ellipticity\")"},{"path":"https://japhir.github.io/snvecR/articles/analyze_grid_td-ed.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Analyze a grid of Td and Ed values","text":"Zeebe, R. E., & Lourens, L. J. (2022). deep-time dating tool paleo-applications utilizing obliquity precession cycles: role dynamical ellipticity tidal dissipation. Paleoceanography Paleoclimatology, e2021PA004349. https://doi.org/10.1029/2021PA004349","code":""},{"path":"https://japhir.github.io/snvecR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ilja Kocken. Author, maintainer. Richard Zeebe. Author.","code":""},{"path":"https://japhir.github.io/snvecR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kocken , Zeebe R (2023). snvecR: Calculate Climatic Precession Obliquity OS, Td, Ed. https://japhir.github.io/snvecR/.","code":"@Manual{KockenZeebe2023,   title = {snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed},   author = {Ilja Kocken and Richard Zeebe},   year = {2023},   url = {https://japhir.github.io/snvecR/}, }"},{"path":"https://japhir.github.io/snvecR/index.html","id":"snvecr","dir":"","previous_headings":"","what":"snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed","title":"snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed","text":"goal snvecR calculate precession obliquity orbital solution (defaults ZB18a) assumed reconstructed values tidal dissipation (Td) dynamical ellipticity (Ed).","code":""},{"path":"https://japhir.github.io/snvecR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed","text":"can install development version snvecR like :","code":"remotes::install_github(\"japhir/snvecR\")"},{"path":"https://japhir.github.io/snvecR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed","text":"’s main function work action: see ?snvec documentation. create quick plot calculated climatic precession eccentricity envelope:","code":"library(snvecR) solution <- snvec() #> Integration parameters: #> • `tend` = -1000 kyr #> • `ed` = 1 #> • `td` = 0 #> • `orbital_solution` = \"ZB18a\" #> • `tres` = 0.4 kyr #> • `tolerance` = 1e-07 #> ℹ started at \"2023-04-12 11:23:51\" #> Final values: #> • s[1][2][3]: 0.404197400723194 -0.0537088738295803 0.91303387030935 #> • s-error = |s|-1: -5.44863786333671e-05 #> Final values: #> • obliquity: 0.413056573207875 rad #> • precession: -0.562236553023642 rad #> ℹ stopped at \"2023-04-12 11:23:52\" #> ℹ total duration: 1.25s library(ggplot2) solution |>   ggplot(aes(x = age, y = cp)) +   # the age scale goes from old to young   scale_x_reverse() +   # plot climatic precession   geom_line(colour = \"skyblue\") +   # add the (interpolated) eccentricity envelope   geom_line(aes(y = eei))"},{"path":"https://japhir.github.io/snvecR/reference/ZB18a.html","id":null,"dir":"Reference","previous_headings":"","what":"Orbital Solution ZB18a — ZB18a","title":"Orbital Solution ZB18a — ZB18a","text":"HNBody output Zeebe & Lourens (2019).","code":""},{"path":"https://japhir.github.io/snvecR/reference/ZB18a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orbital Solution ZB18a — ZB18a","text":"","code":"ZB18a"},{"path":[]},{"path":"https://japhir.github.io/snvecR/reference/ZB18a.html","id":"zb-a","dir":"Reference","previous_headings":"","what":"ZB18a","title":"Orbital Solution ZB18a — ZB18a","text":"data frame 250,001 rows 20 columns: t Time days. age Age thousands years (kyr) present. aa Semimajor axis. ee Eccentricity. inc Inclination. lph Long periapse. lan Long ascending node. arp Argument periapse. mna Mean anomaly. lphu Unwrapped long periapse. lanu Unwrapped long ascending node. hh Helper: ee * sin(lph / R2D). kk Helper: ee * cos(lph / R2D). pp Helper: 2 * sin(0.5 * inc / R2D) * sin(lan / R2D). qq Helper: 2 * sin(0.5 * inc / R2D) * cos(lan / R2D). cc Helper: cos(inc / R2D). dd Helper: cos(inc / R2D / 2). nnx, nny, nnz Vector Earth's orbit normal.","code":""},{"path":"https://japhir.github.io/snvecR/reference/ZB18a.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Orbital Solution ZB18a — ZB18a","text":"orbital solutions can found http://www.soest.hawaii.edu/oceanography/faculty/zeebe_files/Astro.html. specific one use available http://www.soest.hawaii.edu/oceanography/faculty/zeebe_files/Astro/PrecTilt/OS/ZB18a/ems-plan3.dat.","code":""},{"path":"https://japhir.github.io/snvecR/reference/ZB18a.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Orbital Solution ZB18a — ZB18a","text":"wikipedia page Orbital elements describes components relate order uniquely specify orbital plane.","code":""},{"path":"https://japhir.github.io/snvecR/reference/ZB18a.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Orbital Solution ZB18a — ZB18a","text":"Zeebe, R. E., & Lourens, L. J. (2019). Solar System chaos Paleocene–Eocene boundary age constrained geology astronomy. Science, 365(6456), 926–929. https://doi.org/10.1126/science.aax0612","code":""},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"Computes climatic precession obliquity (tilt) orbital solution (OS) input input values dynamical ellipticity (Ed) tidal dissipation (Td). solves set ordinary differential equations.","code":""},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"","code":"snvec(   tend = -1000,   ed = 1,   td = 0,   orbital_solution = \"ZB18a\",   tres = 0.4,   tolerance = 1e-07,   quiet = FALSE,   output = \"nice\" )"},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"tend final timestep -kyr. Defaults -1000 kyr. ed Dynamical ellipticity, normalized modern. Defaults 1.0. td Tidal dissipation, normalized modern. Defaults 0.0. orbital_solution Character vector name orbital solution use. One \"ZB18a\" (default) \"La11\" (yet implemented!). tres output timestep resolution kyr. Defaults 0.4. tolerance numerical tolerance passed deSolve::ode()'s rtol atol arguments. Defaults 1e-7. quiet quiet? TRUE, hide info messages. FALSE (default) print info messages timing. output desired output, one : \"nice\" (default) tibble columns time, age, eei, epl, phi, cp. \"full\" tibble computed interpolated columns. \"ode\" matrix output ODE solver.","code":""},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"tibble selection columns matrix, depending output parameter (see Details).","code":""},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"re-implementation C-code supplementary information Zeebe & Lourens 2022, order make accessible. terms explained detail Zeebe 2022. output tibble following columns: time Time years. age Age thousands years ago (ka). eei orbital solution's eccentricity. epl obliquity radians. phi true anomaly. cp Climatic precession. output = \"\", following additional columns included: sx, sy, sz Input spin vector s heliocentric inertial reference frame. nnx, nny, nnz vector normal orbit. lphi long periapse. lani long ascending node. u input vector s list-column. nv vector n list-column. Vector u', coordinates relative phi(t=0) J2000. output = \"ode\", return raw output ODE solver, object class deSolve matrix. can useful .e. deSolve::diagnostics().","code":""},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"Zeebe, R. E., & Lourens, L. J. (2022). deep-time dating tool paleo-applications utilizing obliquity precession cycles: role dynamical ellipticity tidal dissipation. Paleoceanography Paleoclimatology, e2021PA004349. https://doi.org/10.1029/2021PA004349 Zeebe, R. E. (2022). Reduced Variations Earth’s Mars’ Orbital Inclination Earth’s Obliquity 58 48 Myr ago due Solar System Chaos. Astronomical Journal, 164(3), 107. https://doi.org/10.3847/1538-3881/ac80f8 Wikipedia page Orbital Elements: https://en.wikipedia.org/wiki/Orbital_elements Karline Soetaert, Thomas Petzoldt, R. Woodrow Setzer (2010). Solving Differential Equations R: Package deSolve. Journal Statistical Software, 33(9), 1--25. https:doi.org/10.18637/jss.v033.i09","code":""},{"path":[]},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"Ilja J. Kocken Richard E. Zeebe","code":""},{"path":"https://japhir.github.io/snvecR/reference/snvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate precession and obliquity from an OS, Td, and Ed. — snvec","text":"","code":"# default call snvec() #> Integration parameters: #> • `tend` = -1000 kyr #> • `ed` = 1 #> • `td` = 0 #> • `orbital_solution` = \"ZB18a\" #> • `tres` = 0.4 kyr #> • `tolerance` = 1e-07 #> ℹ started at \"2023-04-12 22:47:35\" #> Final values: #> • s[1][2][3]: 0.404197401889995 -0.0537088693151315 0.913033870060216 #> • s-error = |s|-1: -5.44863769493809e-05 #> Final values: #> • obliquity: 0.413056572908906 rad #> • precession: -0.562236541410392 rad #> ℹ stopped at \"2023-04-12 22:47:37\" #> ℹ total duration: 1.6s #> # A tibble: 2,501 × 6 #>        time   age    eei   epl    phi     cp #>       <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> #>  1        0   0   0.0167 0.409 0      0.0163 #>  2  -146100   0.4 0.0169 0.410 0.0975 0.0168 #>  3  -292200   0.8 0.0171 0.411 0.195  0.0171 #>  4  -438300   1.2 0.0172 0.412 0.292  0.0170 #>  5  -584400   1.6 0.0173 0.413 0.389  0.0168 #>  6  -730500   2   0.0175 0.414 0.486  0.0163 #>  7  -876600   2.4 0.0177 0.414 0.582  0.0156 #>  8 -1022700   2.8 0.0178 0.415 0.679  0.0146 #>  9 -1168800   3.2 0.0179 0.416 0.775  0.0134 #> 10 -1314900   3.6 0.0181 0.417 0.871  0.0120 #> # ℹ 2,491 more rows  # a quick one with few timesteps, low resolution, high tolerance snvec(-1e2, 1, 0, orbital_solution = \"ZB18a\", tres = 1, tolerance = 1e-4) #> Integration parameters: #> • `tend` = -100 kyr #> • `ed` = 1 #> • `td` = 0 #> • `orbital_solution` = \"ZB18a\" #> • `tres` = 1 kyr #> • `tolerance` = 1e-04 #> ℹ started at \"2023-04-12 22:47:37\" #> Final values: #> • s[1][2][3]: 0.367675054892834 -0.133687345565282 0.919917929311039 #> • s-error = |s|-1: -0.00034693567085553 #> Final values: #> • obliquity: 0.413004218872119 rad #> • precession: -0.770431080769168 rad #> ℹ stopped at \"2023-04-12 22:47:37\" #> ℹ total duration: 0.32s #> # A tibble: 101 × 6 #>        time   age    eei   epl   phi        cp #>       <dbl> <dbl>  <dbl> <dbl> <dbl>     <dbl> #>  1        0     0 0.0167 0.409 0      0.0163   #>  2  -365250     1 0.0171 0.411 0.243  0.0171   #>  3  -730500     2 0.0175 0.414 0.485  0.0163   #>  4 -1095750     3 0.0178 0.416 0.727  0.0140   #>  5 -1461000     4 0.0182 0.418 0.967  0.0105   #>  6 -1826250     5 0.0185 0.419 1.21   0.00574  #>  7 -2191500     6 0.0188 0.421 1.45   0.000468 #>  8 -2556750     7 0.0190 0.422 1.68  -0.00499  #>  9 -2922000     8 0.0192 0.423 1.92  -0.0101   #> 10 -3287250     9 0.0193 0.423 2.16  -0.0145   #> # ℹ 91 more rows"},{"path":"https://japhir.github.io/snvecR/reference/snvecR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"snvecR: snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed — snvecR-package","title":"snvecR: snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed — snvecR-package","text":"package makes easy calculate precession obliquity orbital solution (defaults ZB18a) assumed reconstructed values tidal dissipation (td) dynamical ellipticity (ed).","code":""},{"path":[]},{"path":"https://japhir.github.io/snvecR/reference/snvecR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"snvecR: snvecR: Calculate Climatic Precession and Obliquity from OS, Td, and Ed — snvecR-package","text":"Maintainer: Ilja Kocken ikocken@hawaii.edu (ORCID) Authors: Richard Zeebe zeebe@hawaii.edu (ORCID)","code":""},{"path":"https://japhir.github.io/snvecR/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.","code":"my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]]))"},{"path":"https://japhir.github.io/snvecR/news/index.html","id":"snvecr-3759000-development-version","dir":"Changelog","previous_headings":"","what":"snvecR 3.7.5.9000 (development version)","title":"snvecR 3.7.5.9000 (development version)","text":"Added NEWS.md file track changes package. Implemented first public version based C-code Zeebe en Lourens 2022. Added snvec() function work. Added ZB18a dataset orbital solution. Added tests using testthat. Added snvec() output parameter choice select \"ode\", \"\", \"nice\" (default). Added vignette grid variations Td Ed. Added bookdown website rendering.","code":""}]
